#pragma once
#include "./Cards.hpp"

#include <algorithm>
#include <utility>

namespace xel_poker {

	namespace rummy {

		constexpr const char CardPoints[] = {
			2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10,
		};

		constexpr const uint64_t PureSequenceBits[132] = {
			0x8018000000000,
			0x8038000000000,
			0x8078000000000,
			0x38000000000,
			0x78000000000,
			0xf8000000000,
			0x70000000000,
			0xf0000000000,
			0x1f0000000000,
			0xe0000000000,
			0x1e0000000000,
			0x3e0000000000,
			0x1c0000000000,
			0x3c0000000000,
			0x7c0000000000,
			0x380000000000,
			0x780000000000,
			0xf80000000000,
			0x700000000000,
			0xf00000000000,
			0x1f00000000000,
			0xe00000000000,
			0x1e00000000000,
			0x3e00000000000,
			0x1c00000000000,
			0x3c00000000000,
			0x7c00000000000,
			0x3800000000000,
			0x7800000000000,
			0xf800000000000,
			0x7000000000000,
			0xf000000000000,
			0xe000000000000,
			0x400c000000,
			0x401c000000,
			0x403c000000,
			0x1c000000,
			0x3c000000,
			0x7c000000,
			0x38000000,
			0x78000000,
			0xf8000000,
			0x70000000,
			0xf0000000,
			0x1f0000000,
			0xe0000000,
			0x1e0000000,
			0x3e0000000,
			0x1c0000000,
			0x3c0000000,
			0x7c0000000,
			0x380000000,
			0x780000000,
			0xf80000000,
			0x700000000,
			0xf00000000,
			0x1f00000000,
			0xe00000000,
			0x1e00000000,
			0x3e00000000,
			0x1c00000000,
			0x3c00000000,
			0x7c00000000,
			0x3800000000,
			0x7800000000,
			0x7000000000,
			0x2006000,
			0x200e000,
			0x201e000,
			0xe000,
			0x1e000,
			0x3e000,
			0x1c000,
			0x3c000,
			0x7c000,
			0x38000,
			0x78000,
			0xf8000,
			0x70000,
			0xf0000,
			0x1f0000,
			0xe0000,
			0x1e0000,
			0x3e0000,
			0x1c0000,
			0x3c0000,
			0x7c0000,
			0x380000,
			0x780000,
			0xf80000,
			0x700000,
			0xf00000,
			0x1f00000,
			0xe00000,
			0x1e00000,
			0x3e00000,
			0x1c00000,
			0x3c00000,
			0x3800000,
			0x1003,
			0x1007,
			0x100f,
			0x7,
			0xf,
			0x1f,
			0xe,
			0x1e,
			0x3e,
			0x1c,
			0x3c,
			0x7c,
			0x38,
			0x78,
			0xf8,
			0x70,
			0xf0,
			0x1f0,
			0xe0,
			0x1e0,
			0x3e0,
			0x1c0,
			0x3c0,
			0x7c0,
			0x380,
			0x780,
			0xf80,
			0x700,
			0xf00,
			0x1f00,
			0xe00,
			0x1e00,
			0x1c00,
		};

		constexpr const uint64_t Sets[65] = {
			0x8004002000,	 0x8004000001,	  0x8000002001,	   0x4002001,		0x8004002001,	 0x10008004000,	  0x10008000002,   0x10000004002,	0x8004002,
			0x10008004002,	 0x20010008000,	  0x20010000004,   0x20000008004,	0x10008004,		 0x20010008004,	  0x40020010000,   0x40020000008,	0x40000010008,
			0x20010008,		 0x40020010008,	  0x80040020000,   0x80040000010,	0x80000020010,	 0x40020010,	  0x80040020010,   0x100080040000,	0x100080000020,
			0x100000040020,	 0x80040020,	  0x100080040020,  0x200100080000,	0x200100000040,	 0x200000080040,  0x100080040,	   0x200100080040,	0x400200100000,
			0x400200000080,	 0x400000100080,  0x200100080,	   0x400200100080,	0x800400200000,	 0x800400000100,  0x800000200100,  0x400200100,		0x800400200100,
			0x1000800400000, 0x1000800000200, 0x1000000400200, 0x800400200,		0x1000800400200, 0x2001000800000, 0x2001000000400, 0x2000000800400, 0x1000800400,
			0x2001000800400, 0x4002001000000, 0x4002000000800, 0x4000001000800, 0x2001000800,	 0x4002001000800, 0x8004002000000, 0x8004000001000, 0x8000002001000,
			0x4002001000,	 0x8004002001000,
		};

		struct xMeld {
			uint64_t Bits = 0;
			size_t	 Length = 0;
		};

		constexpr const xMeld ValidMeldsSorted[] = {
			{ 0x7, 3 },
			{ 0xe, 3 },
			{ 0xf, 4 },
			{ 0x1c, 3 },
			{ 0x1e, 4 },
			{ 0x1f, 5 },
			{ 0x38, 3 },
			{ 0x3c, 4 },
			{ 0x3e, 5 },
			{ 0x70, 3 },
			{ 0x78, 4 },
			{ 0x7c, 5 },
			{ 0xe0, 3 },
			{ 0xf0, 4 },
			{ 0xf8, 5 },
			{ 0x1c0, 3 },
			{ 0x1e0, 4 },
			{ 0x1f0, 5 },
			{ 0x380, 3 },
			{ 0x3c0, 4 },
			{ 0x3e0, 5 },
			{ 0x700, 3 },
			{ 0x780, 4 },
			{ 0x7c0, 5 },
			{ 0xe00, 3 },
			{ 0xf00, 4 },
			{ 0xf80, 5 },
			{ 0x1003, 3 },
			{ 0x1007, 4 },
			{ 0x100f, 5 },
			{ 0x1c00, 3 },
			{ 0x1e00, 4 },
			{ 0x1f00, 5 },
			{ 0xe000, 3 },
			{ 0x1c000, 3 },
			{ 0x1e000, 4 },
			{ 0x38000, 3 },
			{ 0x3c000, 4 },
			{ 0x3e000, 5 },
			{ 0x70000, 3 },
			{ 0x78000, 4 },
			{ 0x7c000, 5 },
			{ 0xe0000, 3 },
			{ 0xf0000, 4 },
			{ 0xf8000, 5 },
			{ 0x1c0000, 3 },
			{ 0x1e0000, 4 },
			{ 0x1f0000, 5 },
			{ 0x380000, 3 },
			{ 0x3c0000, 4 },
			{ 0x3e0000, 5 },
			{ 0x700000, 3 },
			{ 0x780000, 4 },
			{ 0x7c0000, 5 },
			{ 0xe00000, 3 },
			{ 0xf00000, 4 },
			{ 0xf80000, 5 },
			{ 0x1c00000, 3 },
			{ 0x1e00000, 4 },
			{ 0x1f00000, 5 },
			{ 0x2006000, 3 },
			{ 0x200e000, 4 },
			{ 0x201e000, 5 },
			{ 0x3800000, 3 },
			{ 0x3c00000, 4 },
			{ 0x3e00000, 5 },
			{ 0x4002001, 3 },
			{ 0x8004002, 3 },
			{ 0x10008004, 3 },
			{ 0x1c000000, 3 },
			{ 0x20010008, 3 },
			{ 0x38000000, 3 },
			{ 0x3c000000, 4 },
			{ 0x40020010, 3 },
			{ 0x70000000, 3 },
			{ 0x78000000, 4 },
			{ 0x7c000000, 5 },
			{ 0x80040020, 3 },
			{ 0xe0000000, 3 },
			{ 0xf0000000, 4 },
			{ 0xf8000000, 5 },
			{ 0x100080040, 3 },
			{ 0x1c0000000, 3 },
			{ 0x1e0000000, 4 },
			{ 0x1f0000000, 5 },
			{ 0x200100080, 3 },
			{ 0x380000000, 3 },
			{ 0x3c0000000, 4 },
			{ 0x3e0000000, 5 },
			{ 0x400200100, 3 },
			{ 0x700000000, 3 },
			{ 0x780000000, 4 },
			{ 0x7c0000000, 5 },
			{ 0x800400200, 3 },
			{ 0xe00000000, 3 },
			{ 0xf00000000, 4 },
			{ 0xf80000000, 5 },
			{ 0x1000800400, 3 },
			{ 0x1c00000000, 3 },
			{ 0x1e00000000, 4 },
			{ 0x1f00000000, 5 },
			{ 0x2001000800, 3 },
			{ 0x3800000000, 3 },
			{ 0x3c00000000, 4 },
			{ 0x3e00000000, 5 },
			{ 0x4002001000, 3 },
			{ 0x400c000000, 3 },
			{ 0x401c000000, 4 },
			{ 0x403c000000, 5 },
			{ 0x7000000000, 3 },
			{ 0x7800000000, 4 },
			{ 0x7c00000000, 5 },
			{ 0x8000002001, 3 },
			{ 0x8004000001, 3 },
			{ 0x8004002000, 3 },
			{ 0x8004002001, 4 },
			{ 0x10000004002, 3 },
			{ 0x10008000002, 3 },
			{ 0x10008004000, 3 },
			{ 0x10008004002, 4 },
			{ 0x20000008004, 3 },
			{ 0x20010000004, 3 },
			{ 0x20010008000, 3 },
			{ 0x20010008004, 4 },
			{ 0x38000000000, 3 },
			{ 0x40000010008, 3 },
			{ 0x40020000008, 3 },
			{ 0x40020010000, 3 },
			{ 0x40020010008, 4 },
			{ 0x70000000000, 3 },
			{ 0x78000000000, 4 },
			{ 0x80000020010, 3 },
			{ 0x80040000010, 3 },
			{ 0x80040020000, 3 },
			{ 0x80040020010, 4 },
			{ 0xe0000000000, 3 },
			{ 0xf0000000000, 4 },
			{ 0xf8000000000, 5 },
			{ 0x100000040020, 3 },
			{ 0x100080000020, 3 },
			{ 0x100080040000, 3 },
			{ 0x100080040020, 4 },
			{ 0x1c0000000000, 3 },
			{ 0x1e0000000000, 4 },
			{ 0x1f0000000000, 5 },
			{ 0x200000080040, 3 },
			{ 0x200100000040, 3 },
			{ 0x200100080000, 3 },
			{ 0x200100080040, 4 },
			{ 0x380000000000, 3 },
			{ 0x3c0000000000, 4 },
			{ 0x3e0000000000, 5 },
			{ 0x400000100080, 3 },
			{ 0x400200000080, 3 },
			{ 0x400200100000, 3 },
			{ 0x400200100080, 4 },
			{ 0x700000000000, 3 },
			{ 0x780000000000, 4 },
			{ 0x7c0000000000, 5 },
			{ 0x800000200100, 3 },
			{ 0x800400000100, 3 },
			{ 0x800400200000, 3 },
			{ 0x800400200100, 4 },
			{ 0xe00000000000, 3 },
			{ 0xf00000000000, 4 },
			{ 0xf80000000000, 5 },
			{ 0x1000000400200, 3 },
			{ 0x1000800000200, 3 },
			{ 0x1000800400000, 3 },
			{ 0x1000800400200, 4 },
			{ 0x1c00000000000, 3 },
			{ 0x1e00000000000, 4 },
			{ 0x1f00000000000, 5 },
			{ 0x2000000800400, 3 },
			{ 0x2001000000400, 3 },
			{ 0x2001000800000, 3 },
			{ 0x2001000800400, 4 },
			{ 0x3800000000000, 3 },
			{ 0x3c00000000000, 4 },
			{ 0x3e00000000000, 5 },
			{ 0x4000001000800, 3 },
			{ 0x4002000000800, 3 },
			{ 0x4002001000000, 3 },
			{ 0x4002001000800, 4 },
			{ 0x7000000000000, 3 },
			{ 0x7800000000000, 4 },
			{ 0x7c00000000000, 5 },
			{ 0x8000002001000, 3 },
			{ 0x8004000001000, 3 },
			{ 0x8004002000000, 3 },
			{ 0x8004002001000, 4 },
			{ 0x8018000000000, 3 },
			{ 0x8038000000000, 4 },
			{ 0x8078000000000, 5 },
			{ 0xe000000000000, 3 },
			{ 0xf000000000000, 4 },
			{ 0xf800000000000, 5 },
		};

		class xHandCard {
		public:
			uint64_t Cards0 = 0;
			uint64_t Cards1 = 0;

		public:
			X_INLINE bool IsNormalized() const { return (Cards0 & Cards1) == Cards1; }
			X_INLINE void Normalize() {
				auto Diff = (Cards0 ^ Cards1) & Cards1;
				Cards0 += Diff;
				Cards1 -= Diff;
			}
			X_INLINE bool AddCards(uint64_t CardBits) {
				auto Conflict = Cards0 & CardBits;
				if (Conflict & Cards1) {
					return false;
				}
				Cards0 |= CardBits;
				Cards1 |= Conflict;
				return true;
			}
			X_INLINE void RemoveCards(uint64_t CardBits) {
				assert(IsNormalized());
				assert((Cards0 & CardBits) == CardBits);
				Cards0 -= CardBits;
				Normalize();
			}
			X_INLINE void RemoveCards(const xHandCard & Other) {
				assert(IsNormalized() && Other.IsNormalized());
				assert((Cards0 & Other.Cards0) == Other.Cards0);
				assert((Cards1 & Other.Cards1) == Other.Cards1);
				Cards0 -= Other.Cards0;
				Cards1 -= Other.Cards1;
			}
			X_INLINE std::vector<xCard> ToCards() const {
				auto Result = GetCardsFromBitsSorted(Cards0);
				auto Secondary = GetCardsFromBitsSorted(Cards1);
				for (auto & S : Secondary) {
					Result.push_back(S);
				}
				return Result;
			}
		};

		X_EXTERN void foo();

	}  // namespace rummy

}  // namespace xel_poker
